name: Openspace-hn-xcode-build-hn-x86_64

on: workflow_dispatch

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  # This yml is copied from https://github.com/hn-88/OpenSpace-AppImage/blob/main/.github/workflows/appimage-creation.yml
  # and modified.
  BUILD_TYPE: Release
  OPENSPACE_VERSION: "0.21.0post-rc1"
  THIS_REPO_PATH: "/Users/runner/work/OpenSpace-IntelMac/OpenSpace-IntelMac" 
  
jobs:
  build:
    # https://github.com/actions/runner-images/blob/main/images/macos/macos-14-arm64-Readme.md
    # https://github.com/actions/runner-images/blob/main/images/macos/macos-13-Readme.md
    runs-on: macos-13

    steps:
    - uses: actions/checkout@v4
    
    - name: get openspace code for a particular release
      # https://docs.openspaceproject.com/releases-v0.20/contribute/development/compiling/macos.html
      run: |
        openSpaceHome="$HOME/source/OpenSpace"
        git clone --recursive https://github.com/hn-88/OpenSpace.git "$openSpaceHome"
        cd "$openSpaceHome"
        # use the main branch instead # git checkout "releases/v${OPENSPACE_VERSION}" --recurse-submodules
        git checkout ToCompileOnMacOS --recurse-submodules
        mkdir build
        cd build

    - name: Update Homebrew and Install GLM
      run: |
        brew update
        brew install glm

    - name: get patched Ghoul
      run: |
        openSpaceHome="$HOME/source/OpenSpace"
        cd "$openSpaceHome/ext"
        rm -rf ghoul
        git clone https://github.com/hn-88/Ghoul.git --branch MacOSfixes --recursive

    - name: patch touchbar
      run: |
        openSpaceHome="$HOME/source/OpenSpace"
        # cp -v src-interaction-touchbar.mm "$openSpaceHome/src/interaction/touchbar.mm"

    - name: Build fmt from source
      run: |
        git clone https://github.com/fmtlib/fmt.git
        cd fmt
        mkdir build && cd build
        cmake .. -DCMAKE_OSX_ARCHITECTURES=x86_64 -DBUILD_SHARED_LIBS=ON
        make
        sudo make install

    - name: replacing std::format with fmt::format
      run: |
        export LC_ALL=C.UTF-8
        export LANG=C.UTF-8
        openSpaceHome="$HOME/source/OpenSpace"
        cd "$openSpaceHome"
        find . -type f \( -name "*.cpp" -o -name "*.cc" -o -name "*.cxx" -o -name "*.hpp" -o -name "*.h" \) -exec sed -i '' 's/std::format/fmt::format/g' {} +
        # Safely replace the include line (escape the slash)
        find . -type f \( -name "*.cpp" -o -name "*.cc" -o -name "*.cxx" -o -name "*.hpp" -o -name "*.h" \) -exec sed -i '' "s|#include[[:space:]]*<format>|#include <fmt/core.h>|g" {} +
         
    - name: Link fmt with every target in all CMakeLists.txt
      run: |
        openSpaceHome="$HOME/source/OpenSpace"
        cd "$openSpaceHome"
        find . -name 'CMakeLists.txt' | while read cmakefile; do
          # Insert target_link_libraries line after every add_executable or add_library
          sed -i '' -E '/add_(executable|library)\(([^ )]+)/a\
          target_link_libraries(\2 PRIVATE fmt::fmt)
          ' "$cmakefile"
          # Ensure find_package(fmt REQUIRED) is present
          grep -q 'find_package(fmt' "$cmakefile" || sed -i '' '1i\
          find_package(fmt REQUIRED)
          ' "$cmakefile"
        done

    - name: patch sgct src CMakeLists.txt for fmt
      run: |
        openSpaceHome="$HOME/source/OpenSpace"
        cp -v apps-OpenSpace-ext-sgct-include-sgct-format.h "$openSpaceHome/apps/OpenSpace/ext/sgct/include/sgct/format.h
        cp -v sgct-src-CMakeLists.txt "$openSpaceHome/apps/OpenSpace/ext/sgct/src/CMakeLists.txt"
            
    - name: Install dependencies
      # https://docs.openspaceproject.com/releases-v0.20/contribute/development/compiling/ubuntu.html
      run: |
        brew install glew boost freeimage mpv vulkan-headers vulkan-loader brotli gdal qt@6

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        openSpaceHome="$HOME/source/OpenSpace"
        cd "$openSpaceHome/build"
        # https://stackoverflow.com/questions/16700415/cmake-generate-xcode-project-from-existing-sources
        # CMAKE_PREFIX_PATH to /opt/homebrew - https://stackoverflow.com/questions/68105648/configure-cmake-to-work-with-homebrew-libraries-instead-system-provided-librarie
        cmake -G Xcode -DCMAKE_POLICY_VERSION_MINIMUM=3.5 -DCMAKE_CXX_STANDARD=20 -DONLY_ACTIVE_ARCH=YES -DCMAKE_OSX_ARCHITECTURES=x86_64 -DCMAKE_OSX_DEPLOYMENT_TARGET=13.3 -DCMAKE_CXX_FLAGS="-Wno-error -D_FILE_OFFSET_BITS=64" -DCMAKE_C_FLAGS="-Wno-error -Wno-dev -D_FILE_OFFSET_BITS=64" -DCMAKE_BUILD_TYPE="Release" -DCMAKE_PREFIX_PATH=/opt/homebrew -DBUILD_TESTS=OFF -DCOMPILE_WARNING_AS_ERROR=OFF -DOPENSPACE_HAVE_TESTS=OFF -DSGCT_BUILD_TESTS=OFF "$openSpaceHome"       

    - name: Build
      # Build your program with the given configuration
      run: |
        openSpaceHome="$HOME/source/OpenSpace"
        cd "$openSpaceHome/build"
        # echo "Check to see if we have enough disk space ... " only 8 GB used out of 120+ GB
        # df -h
        cmake --build . --config ${{env.BUILD_TYPE}} -- -DCMAKE_OSX_ARCHITECTURES=x86_64 -DCMAKE_OSX_DEPLOYMENT_TARGET=13.3
        
    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        # Artifact name
        name: OpenSpace-MacOS14-IntelMac
        # optional, default is artifact
        # A file, directory or wildcard pattern that describes what to upload
        path: /Users/runner/source/OpenSpace/bin/Release/*.app
      
    
