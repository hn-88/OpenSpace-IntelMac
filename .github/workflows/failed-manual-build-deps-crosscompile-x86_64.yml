name: failed-manual-build-deps-crosscompile-x86_64-on-macos14

on: workflow_dispatch

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  # This yml is copied from https://github.com/hn-88/OpenSpace-AppImage/blob/main/.github/workflows/appimage-creation.yml
  # and modified.
  BUILD_TYPE: Release
  OPENSPACE_VERSION: "0.21.0plus"
  THIS_REPO_PATH: "/Users/runner/work/OpenSpace-IntelMac/OpenSpace-IntelMac" 
  
jobs:
  build:
    # https://github.com/actions/runner-images/blob/main/images/macos/macos-14-arm64-Readme.md
    # https://github.com/actions/runner-images/blob/main/images/macos/macos-13-Readme.md
    runs-on: macos-14

    steps:
    - uses: actions/checkout@v4
    
    - name: get openspace code for a particular release
      # https://docs.openspaceproject.com/releases-v0.20/contribute/development/compiling/macos.html
      run: |
        openSpaceHome="$HOME/source/OpenSpace"
        git clone --recursive https://github.com/hn-88/OpenSpace.git "$openSpaceHome"
        cd "$openSpaceHome"
        # use the main branch instead # git checkout "releases/v${OPENSPACE_VERSION}" --recurse-submodules
        git checkout ToCompileOnMacOS --recurse-submodules
        mkdir build
        cd build

    - name: Update Homebrew and Install GLM
      run: |
        brew update
        brew install glm

    - name: get patched Ghoul
      run: |
        openSpaceHome="$HOME/source/OpenSpace"
        cd "$openSpaceHome/ext"
        rm -rf ghoul
        git clone https://github.com/hn-88/Ghoul.git --branch MacOSfixes --recursive

    - name: patch touchbar
      run: |
        openSpaceHome="$HOME/source/OpenSpace"
        # cp -v src-interaction-touchbar.mm "$openSpaceHome/src/interaction/touchbar.mm"

            
    - name: Install dependencies
      # https://docs.openspaceproject.com/releases-v0.20/contribute/development/compiling/ubuntu.html
      run: |
        # brew install glew boost freeimage mpv vulkan-headers vulkan-loader brotli gdal 
        # installing qt@6 and each separately for intel libraries
    
    - name: Restore dependency cache
      uses: actions/cache@v4
      with:
        path: |
          ~/src
          ~/os-deps-x86_64
        key: os-deps-cache-${{ runner.os }}-v1

    - name: Build OpenSpace Dependencies from Source (x86_64)
      run: |
        set -e
        export ARCH=x86_64
        export PREFIX="$HOME/os-deps-$ARCH"
        export PATH="$PREFIX/bin:$PATH"
        export PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig:$PREFIX/share/pkgconfig"
        mkdir -p "$PREFIX" "$HOME/src"
        cd "$HOME/src"

        alias make="arch -x86_64 make"
        alias cmake="arch -x86_64 cmake"

        # Skip building if already built
        if [ -f "$PREFIX/lib/libGLEW.a" ]; then
          echo "Dependencies already built and cached."
          exit 0
        fi

        ######## GLEW ########
        git clone --depth=1 https://github.com/nigels-com/glew.git glew-src
        cd glew-src
        make GLEW_DEST="$PREFIX" SYSTEM=darwin
        make GLEW_DEST="$PREFIX" install
        cd ..

        ######## BOOST ########
        curl -LO https://boostorg.jfrog.io/artifactory/main/release/1.84.0/source/boost_1_84_0.tar.gz
        tar xf boost_1_84_0.tar.gz
        cd boost_1_84_0
        ./bootstrap.sh --prefix="$PREFIX"
        ./b2 install cxxflags="-arch x86_64" linkflags="-arch x86_64"
        cd ..

        ######## FREEIMAGE ########
        git clone --depth=1 https://github.com/multitheftauto/FreeImage.git freeimage-src
        cd freeimage-src
        make -f Makefile.osx
        mkdir -p "$PREFIX/include" "$PREFIX/lib"
        cp -r Dist/FreeImage.h Dist/FreeImagePlus.h "$PREFIX/include/"
        cp Dist/libfreeimage.a "$PREFIX/lib/"
        cd ..

        ######## VULKAN HEADERS ########
        git clone --depth=1 https://github.com/KhronosGroup/Vulkan-Headers.git vulkan-headers
        cd vulkan-headers
        cmake -B build -DCMAKE_INSTALL_PREFIX="$PREFIX"
        cmake --build build
        cmake --install build
        cd ..

        ######## VULKAN LOADER ########
        git clone --depth=1 https://github.com/KhronosGroup/Vulkan-Loader.git vulkan-loader
        cd vulkan-loader
        cmake -B build -DCMAKE_INSTALL_PREFIX="$PREFIX" -DCMAKE_BUILD_TYPE=Release -DVULKAN_HEADERS_INSTALL_DIR="$PREFIX"
        cmake --build build
        cmake --install build
        cd ..

        ######## BROTLI ########
        git clone --depth=1 https://github.com/google/brotli.git brotli
        cd brotli
        cmake -B out -DCMAKE_INSTALL_PREFIX="$PREFIX"
        cmake --build out
        cmake --install out
        cd ..

        ######## GDAL ########
        curl -LO https://download.osgeo.org/gdal/3.8.5/gdal-3.8.5.tar.gz
        tar xf gdal-3.8.5.tar.gz
        cd gdal-3.8.5
        ./configure --prefix="$PREFIX" --with-hide-internal-symbols
        make -j$(sysctl -n hw.logicalcpu)
        make install
        cd ..

        ######## GLM ########
        git clone --depth=1 https://github.com/g-truc/glm.git glm
        cd glm
        cmake -B build -DCMAKE_INSTALL_PREFIX="$PREFIX"
        cmake --install build
        cd ..

    - name: Install prebuilt mpv for x86_64
      run: |
        mkdir -p "$HOME/os-deps-x86_64/bin"
        curl -L -o mpv.zip https://laboratory.stolendata.net/~djinn/mpv_osx/mpv-0.39.0.tar.gz
        unzip mpv.zip
        mv mpv.app/Contents/MacOS/mpv "$HOME/os-deps-x86_64/bin/mpv"
        chmod +x "$HOME/os-deps-x86_64/bin/mpv"


  
    - name: Install x86_64 QT
      uses: jurplel/install-qt-action@v4
      with:
        version: '6.9.1'
        arch: clang_64 
        # x86-64 /x64 fails with Please use 'aqt list-qt mac desktop --arch 6.9.1' to show architectures available.
        # apparently clang_arm64 is for arm64, and clang_64 is for x86_64?

   # - name: Install QT for x86_64
    # https://doc.qt.io/qt-6.9/get-and-install-qt-cli.html#options-for-unattended-usage
   #   run: |
        # https://doc.qt.io/qt-6.9/get-and-install-qt-cli.html
   #     wget https://download.qt.io/official_releases/online_installers/qt-online-installer-mac-x64-online.dmg
        # macOS: new installation with Qt Online Installer
   #     hdiutil attach qt-online-installer-macOS-x64-4.10.0.dmg
   #     /Volumes/qt-unified-macOS-x64-[Qt Online Installer version]-online/qt-unified-macOS-x64-[Qt Online Installer version]-online.app/Contents/MacOS/qt-unified-macOS-x64-[Qt Online Installer version]-online install qt6.9.1-sdk
   #     hdiutil detach /Volumes/qt-unified-macOS-x64-[Qt Online Installer version]-online
    

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        openSpaceHome="$HOME/source/OpenSpace"
        cd "$openSpaceHome/build"
        # https://stackoverflow.com/questions/16700415/cmake-generate-xcode-project-from-existing-sources
        # CMAKE_PREFIX_PATH to /opt/homebrew - https://stackoverflow.com/questions/68105648/configure-cmake-to-work-with-homebrew-libraries-instead-system-provided-librarie
        cmake -G Xcode -DCMAKE_POLICY_VERSION_MINIMUM=3.5 -DCMAKE_CXX_STANDARD=20 -DONLY_ACTIVE_ARCH=YES -DCMAKE_OSX_ARCHITECTURES=x86_64 -DCMAKE_OSX_DEPLOYMENT_TARGET=13.3 -DCMAKE_CXX_FLAGS="-Wno-error -D_FILE_OFFSET_BITS=64" -DCMAKE_C_FLAGS="-Wno-error -Wno-dev -D_FILE_OFFSET_BITS=64" -DCMAKE_BUILD_TYPE="Release" -DCMAKE_PREFIX_PATH=/opt/homebrew -DBUILD_TESTS=OFF -DCOMPILE_WARNING_AS_ERROR=OFF -DOPENSPACE_HAVE_TESTS=OFF -DSGCT_BUILD_TESTS=OFF "$openSpaceHome"       

    - name: Build
      # Build your program with the given configuration
      run: |
        openSpaceHome="$HOME/source/OpenSpace"
        cd "$openSpaceHome/build"
        # echo "Check to see if we have enough disk space ... " only 8 GB used out of 120+ GB
        # df -h
        cmake --build . --config ${{env.BUILD_TYPE}} -- -DCMAKE_OSX_ARCHITECTURES=x86_64 -DCMAKE_OSX_DEPLOYMENT_TARGET=13.3
        
    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        # Artifact name
        name: OpenSpace-MacOS14-IntelMac
        # optional, default is artifact
        # A file, directory or wildcard pattern that describes what to upload
        path: /Users/runner/source/OpenSpace/bin/Release/*.app
      
    
